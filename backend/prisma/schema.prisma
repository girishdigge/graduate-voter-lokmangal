// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id             String   @id @default(uuid())
    aadharNumber   String   @unique @map("aadhar_number") @db.VarChar(12)
    fullName       String   @map("full_name") @db.VarChar(255)
    sex            Sex
    guardianSpouse String?  @map("guardian_spouse") @db.VarChar(255)
    qualification  String?  @db.VarChar(255)
    occupation     String?  @db.VarChar(255)
    contact        String   @db.VarChar(15)
    email          String?  @db.VarChar(255)
    dateOfBirth    DateTime @map("date_of_birth") @db.Date
    age            Int

    // Address Information
    houseNumber String @map("house_number") @db.VarChar(50)
    street      String @db.VarChar(255)
    area        String @db.VarChar(255)
    city        String @db.VarChar(100)
    state       String @db.VarChar(100)
    pincode     String @db.VarChar(10)

    // Elector Information (optional)
    isRegisteredElector  Boolean   @default(false) @map("is_registered_elector")
    assemblyNumber       String?   @map("assembly_number") @db.VarChar(10)
    assemblyName         String?   @map("assembly_name") @db.VarChar(255)
    pollingStationNumber String?   @map("polling_station_number") @db.VarChar(10)
    electorDob           DateTime? @map("elector_dob") @db.Date
    epicNumber           String?   @map("epic_number") @db.VarChar(20)

    // Education Information
    university        String? @db.VarChar(255)
    graduationYear    Int?    @map("graduation_year")
    graduationDocType String? @map("graduation_doc_type") @db.VarChar(100)

    // Verification Status
    isVerified Boolean   @default(false) @map("is_verified")
    verifiedBy String?   @map("verified_by")
    verifiedAt DateTime? @map("verified_at")

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    documents       Document[]
    references      Reference[]
    auditLogs       AuditLog[]
    verifiedByAdmin Admin?      @relation("VerifiedUsers", fields: [verifiedBy], references: [id])

    // Indexes for performance
    @@index([aadharNumber])
    @@index([contact])
    @@index([assemblyNumber])
    @@index([pollingStationNumber])
    @@index([isVerified])
    @@index([createdAt])
    @@map("users")
}

model Document {
    id           String       @id @default(uuid())
    userId       String       @map("user_id")
    documentType DocumentType @map("document_type")
    fileName     String       @map("file_name") @db.VarChar(255)
    fileSize     Int          @map("file_size")
    mimeType     String       @map("mime_type") @db.VarChar(100)
    s3Key        String       @map("s3_key") @db.VarChar(500)
    s3Bucket     String       @map("s3_bucket") @db.VarChar(100)
    isActive     Boolean      @default(true) @map("is_active")
    uploadedAt   DateTime     @default(now()) @map("uploaded_at")

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Indexes for performance
    @@index([userId])
    @@index([documentType])
    @@index([isActive])
    @@map("documents")
}

model Reference {
    id               String          @id @default(uuid())
    userId           String          @map("user_id")
    referenceName    String          @map("reference_name") @db.VarChar(255)
    referenceContact String          @map("reference_contact") @db.VarChar(15)
    status           ReferenceStatus @default(PENDING)
    whatsappSent     Boolean         @default(false) @map("whatsapp_sent")
    whatsappSentAt   DateTime?       @map("whatsapp_sent_at")
    statusUpdatedAt  DateTime?       @map("status_updated_at")
    createdAt        DateTime        @default(now()) @map("created_at")
    updatedAt        DateTime        @updatedAt @map("updated_at")

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Indexes for performance
    @@index([userId])
    @@index([status])
    @@index([referenceContact])
    @@map("references")
}

model Admin {
    id           String    @id @default(uuid())
    username     String    @unique @db.VarChar(50)
    email        String    @unique @db.VarChar(255)
    passwordHash String    @map("password_hash") @db.VarChar(255)
    fullName     String    @map("full_name") @db.VarChar(255)
    role         AdminRole @default(MANAGER)
    isActive     Boolean   @default(true) @map("is_active")
    lastLoginAt  DateTime? @map("last_login_at")
    createdAt    DateTime  @default(now()) @map("created_at")
    updatedAt    DateTime  @updatedAt @map("updated_at")

    // Relations
    auditLogs     AuditLog[]
    verifiedUsers User[]     @relation("VerifiedUsers")

    // Indexes for performance
    @@index([role])
    @@index([isActive])
    @@map("admins")
}

model AuditLog {
    id         String   @id @default(uuid())
    entityType String   @map("entity_type") @db.VarChar(50)
    entityId   String   @map("entity_id")
    action     String   @db.VarChar(50)
    oldValues  Json?    @map("old_values")
    newValues  Json?    @map("new_values")
    userId     String?  @map("user_id")
    adminId    String?  @map("admin_id")
    ipAddress  String?  @map("ip_address") @db.VarChar(45)
    userAgent  String?  @map("user_agent") @db.Text
    createdAt  DateTime @default(now()) @map("created_at")

    // Relations
    user  User?  @relation(fields: [userId], references: [id])
    admin Admin? @relation(fields: [adminId], references: [id])

    // Indexes for performance
    @@index([entityType])
    @@index([entityId])
    @@index([action])
    @@index([userId])
    @@index([adminId])
    @@index([createdAt])
    @@map("audit_logs")
}

enum Sex {
    MALE
    FEMALE
    OTHER
}

enum DocumentType {
    AADHAR
    DEGREE_CERTIFICATE
    PHOTO
}

enum ReferenceStatus {
    PENDING
    CONTACTED
    APPLIED
}

enum AdminRole {
    ADMIN
    MANAGER
}
